from src.func import *
from pprint import pprint
import pandas as pd
import src.exploit_test_case as t_case
from tqdm import tqdm as tq

class make_query_exploit:
    def __init__(self,chrome,url,port, vm_num, id, pw):
        self.chrome = chrome
        self.url = url
        self.port = port
        self.result_csrf_data = []
        self.file_name_element = []
        self.vm_num = vm_num
        self.chrome = chrome
        self.id = id
        self.pw = pw

    def csrf_protection_check(self):
        csv_list = os.listdir("./csv")
        csrf_csv_list = []

        for list in csv_list:
            if "post_value" in list:
                csrf_csv_list.append(list)

        pprint(csrf_csv_list)

        csrf_case_file_name = f"CSRF_TEST_Result_vm{self.vm_num}_{self.id}"
        csv_data=""
        if csrf_case_file_name in csrf_csv_list:
            csv_data = pd.read_csv(f"./csv/{csrf_case_file_name}.")
        else:
            print("파일 이름이 잘못되었습니다.")
            exit(0)

        login(self.chrome, self.user, self.pw, "first_login")

        for i in tq(range(len(csv_data)), mininterval=1):
            data = csv_data.loc[i].tolist()
            #이게되네... 파이선은 신인가? csv 파일에서 읽어오기
            #url, port, id,pw, path는 셀레니움으로 접근 | action,value는 이제 request에서 사용

            dummy, url, port, id, pw, path, action, value, value_type = data

            try:
                key, value, response = t_case.Csrf_protection_check(chrome, url, port,id, pw, path, action, value, value_type)
            except:
                chrome = webdriver.Chrome(check_driver())
                key, value, response = t_case.Csrf_protection_check(chrome, url, port, id, pw, path, action, value, value_type)

            if key and value and response == 0:
                continue

            result_row = [url, port, action, key, value, response]
            self.result_csrf_data.append(result_row)

        Param_col = ['URL', 'Jenkins_id', 'Action', 'Key', 'Value', 'Response']

        # 파일이 있는지 확인하고, 있으면 덮어씌움, 참고로 파일은 Scanning_result_유저이름.csv
        result_file = f"CSRF_TEST_Result_{self.vm_num}_{self.id}.csv"
        make_csv_file(Param_col,self.result_csrf_data,result_file)


    def reflected_xss_check(self):
        result_file_col = ["URL", "ID", "PATH", "PARAM", "QUERY"]
        result_file_low = []
        result_file_name = f"xss_reflected_success_vm{self.vm_num}_{self.id}.csv"

        result_file_low += t_case.xss_reflected_all_param(self.url, self.port, self.id, self.pw, self.vm_num)
        make_csv_file(result_file_col,result_file_low,result_file_name)

